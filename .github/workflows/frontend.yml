# Nom du workflow, visible dans l'onglet "Actions" de GitHub
name: CI/CD for Frontend

# Déclencheurs du workflow
on:
  # Déclenche le workflow sur les push vers la branche 'main'
  push:
    branches:
      - main
  # Déclenche le workflow sur les pull requests vers la branche 'main'
  pull_request:
    branches:
      - main

# Définition des jobs
jobs:
  build-and-deploy:
    # Le job s'exécute sur le dernier environnement Ubuntu disponible
    runs-on: ubuntu-latest

    # Les étapes du job
    steps:
      # Étape 1: Checker le code source depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2: Configurer l'environnement Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14' # Version de Node.js à utiliser

      # Étape 3: Installer les dépendances du projet
      - name: Install dependencies
        run: npm install

      # Étape 4: Construire le projet
      - name: Build project
        run: npm run build

      # Étape 5: Configurer Docker Buildx pour permettre le build multi-plateforme
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Étape 6: Se connecter à Docker Hub avec des secrets pour les informations d'identification
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Étape 7: Construire et pousser l'image Docker sur Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: . # Le contexte de build est le répertoire courant
          push: true # Pousse l'image vers Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/craftedby-frontend-1:latest # Tag de l'image

      # Étape 8: Se connecter au serveur distant via SSH et déployer l'application
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }} # Adresse IP du serveur
          username: ${{ secrets.SERVER_USERNAME }} # Nom d'utilisateur SSH
          key: ${{ secrets.SERVER_SSH_KEY }} # Clé SSH pour l'authentification
          script: |
            # Commandes à exécuter sur le serveur pour mettre à jour et redémarrer les conteneurs Docker
            docker-compose -f ./traefik/docker-compose-app.yml pull
            docker-compose -f ./traefik/docker-compose-app.yml up -d --remove-orphans
